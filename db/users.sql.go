// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
)

const createTarjeta = `-- name: CreateTarjeta :one
INSERT INTO Tarjeta (pregunta, respuesta, opcion_a, opcion_b, opcion_c, id_tema)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id_tarjeta, pregunta, respuesta, opcion_a, opcion_b, opcion_c, id_tema
`

type CreateTarjetaParams struct {
	Pregunta  string `json:"pregunta"`
	Respuesta string `json:"respuesta"`
	OpcionA   string `json:"opcion_a"`
	OpcionB   string `json:"opcion_b"`
	OpcionC   string `json:"opcion_c"`
	IDTema    int32  `json:"id_tema"`
}

func (q *Queries) CreateTarjeta(ctx context.Context, arg CreateTarjetaParams) (Tarjetum, error) {
	row := q.db.QueryRowContext(ctx, createTarjeta,
		arg.Pregunta,
		arg.Respuesta,
		arg.OpcionA,
		arg.OpcionB,
		arg.OpcionC,
		arg.IDTema,
	)
	var i Tarjetum
	err := row.Scan(
		&i.IDTarjeta,
		&i.Pregunta,
		&i.Respuesta,
		&i.OpcionA,
		&i.OpcionB,
		&i.OpcionC,
		&i.IDTema,
	)
	return i, err
}

const createTema = `-- name: CreateTema :one
INSERT INTO Tema (nombre_tema)
VALUES ($1)
RETURNING id_tema, nombre_tema
`

func (q *Queries) CreateTema(ctx context.Context, nombreTema string) (Tema, error) {
	row := q.db.QueryRowContext(ctx, createTema, nombreTema)
	var i Tema
	err := row.Scan(&i.IDTema, &i.NombreTema)
	return i, err
}

const createUsuario = `-- name: CreateUsuario :one
INSERT INTO Usuario (nombre_usuario, email, contrasena)
VALUES ($1, $2, $3)
RETURNING id_usuario, nombre_usuario, email, contrasena
`

type CreateUsuarioParams struct {
	NombreUsuario string `json:"nombre_usuario"`
	Email         string `json:"email"`
	Contrasena    string `json:"contrasena"`
}

func (q *Queries) CreateUsuario(ctx context.Context, arg CreateUsuarioParams) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, createUsuario, arg.NombreUsuario, arg.Email, arg.Contrasena)
	var i Usuario
	err := row.Scan(
		&i.IDUsuario,
		&i.NombreUsuario,
		&i.Email,
		&i.Contrasena,
	)
	return i, err
}

const deleteTarjeta = `-- name: DeleteTarjeta :exec
DELETE FROM Tarjeta
WHERE id_tarjeta = $1
`

func (q *Queries) DeleteTarjeta(ctx context.Context, idTarjeta int32) error {
	_, err := q.db.ExecContext(ctx, deleteTarjeta, idTarjeta)
	return err
}

const deleteTema = `-- name: DeleteTema :exec
DELETE FROM Tema
WHERE id_tema = $1
`

func (q *Queries) DeleteTema(ctx context.Context, idTema int32) error {
	_, err := q.db.ExecContext(ctx, deleteTema, idTema)
	return err
}

const deleteUsuario = `-- name: DeleteUsuario :exec
DELETE FROM Usuario
WHERE id_usuario = $1
`

func (q *Queries) DeleteUsuario(ctx context.Context, idUsuario int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsuario, idUsuario)
	return err
}

const getTarjetaById = `-- name: GetTarjetaById :one
SELECT id_tarjeta, pregunta, respuesta, opcion_a, opcion_b, opcion_c, id_tema 
FROM Tarjeta
WHERE id_tarjeta = $1
`

func (q *Queries) GetTarjetaById(ctx context.Context, idTarjeta int32) (Tarjetum, error) {
	row := q.db.QueryRowContext(ctx, getTarjetaById, idTarjeta)
	var i Tarjetum
	err := row.Scan(
		&i.IDTarjeta,
		&i.Pregunta,
		&i.Respuesta,
		&i.OpcionA,
		&i.OpcionB,
		&i.OpcionC,
		&i.IDTema,
	)
	return i, err
}

const getTemaById = `-- name: GetTemaById :one
SELECT id_tema, nombre_tema
FROM Tema
WHERE id_tema = $1
`

func (q *Queries) GetTemaById(ctx context.Context, idTema int32) (Tema, error) {
	row := q.db.QueryRowContext(ctx, getTemaById, idTema)
	var i Tema
	err := row.Scan(&i.IDTema, &i.NombreTema)
	return i, err
}

const getUsuarioById = `-- name: GetUsuarioById :one
SELECT id_usuario, nombre_usuario, email, contrasena
FROM Usuario
WHERE id_usuario = $1
`

func (q *Queries) GetUsuarioById(ctx context.Context, idUsuario int32) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, getUsuarioById, idUsuario)
	var i Usuario
	err := row.Scan(
		&i.IDUsuario,
		&i.NombreUsuario,
		&i.Email,
		&i.Contrasena,
	)
	return i, err
}

const listTarjetas = `-- name: ListTarjetas :many
SELECT id_tarjeta, pregunta, respuesta, opcion_a, opcion_b, opcion_c, id_tema 
FROM Tarjeta
ORDER BY random()
`

func (q *Queries) ListTarjetas(ctx context.Context) ([]Tarjetum, error) {
	rows, err := q.db.QueryContext(ctx, listTarjetas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tarjetum
	for rows.Next() {
		var i Tarjetum
		if err := rows.Scan(
			&i.IDTarjeta,
			&i.Pregunta,
			&i.Respuesta,
			&i.OpcionA,
			&i.OpcionB,
			&i.OpcionC,
			&i.IDTema,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTarjetasByTema = `-- name: ListTarjetasByTema :many
SELECT id_tarjeta, pregunta, respuesta, opcion_a, opcion_b, opcion_c, id_tema 
FROM Tarjeta
WHERE id_tema = $1
ORDER BY random()
`

func (q *Queries) ListTarjetasByTema(ctx context.Context, idTema int32) ([]Tarjetum, error) {
	rows, err := q.db.QueryContext(ctx, listTarjetasByTema, idTema)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tarjetum
	for rows.Next() {
		var i Tarjetum
		if err := rows.Scan(
			&i.IDTarjeta,
			&i.Pregunta,
			&i.Respuesta,
			&i.OpcionA,
			&i.OpcionB,
			&i.OpcionC,
			&i.IDTema,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemas = `-- name: ListTemas :many
SELECT id_tema, nombre_tema
FROM Tema
ORDER BY nombre_tema
`

func (q *Queries) ListTemas(ctx context.Context) ([]Tema, error) {
	rows, err := q.db.QueryContext(ctx, listTemas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tema
	for rows.Next() {
		var i Tema
		if err := rows.Scan(&i.IDTema, &i.NombreTema); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsuarios = `-- name: ListUsuarios :many
SELECT id_usuario, nombre_usuario, email, contrasena
FROM Usuario
ORDER BY nombre_usuario
`

func (q *Queries) ListUsuarios(ctx context.Context) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, listUsuarios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(
			&i.IDUsuario,
			&i.NombreUsuario,
			&i.Email,
			&i.Contrasena,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTarjeta = `-- name: UpdateTarjeta :exec
UPDATE Tarjeta
SET pregunta = $2, respuesta = $3, opcion_a = $4, opcion_b = $5, opcion_c = $6, id_tema = $7
WHERE id_tarjeta = $1
`

type UpdateTarjetaParams struct {
	IDTarjeta int32  `json:"id_tarjeta"`
	Pregunta  string `json:"pregunta"`
	Respuesta string `json:"respuesta"`
	OpcionA   string `json:"opcion_a"`
	OpcionB   string `json:"opcion_b"`
	OpcionC   string `json:"opcion_c"`
	IDTema    int32  `json:"id_tema"`
}

func (q *Queries) UpdateTarjeta(ctx context.Context, arg UpdateTarjetaParams) error {
	_, err := q.db.ExecContext(ctx, updateTarjeta,
		arg.IDTarjeta,
		arg.Pregunta,
		arg.Respuesta,
		arg.OpcionA,
		arg.OpcionB,
		arg.OpcionC,
		arg.IDTema,
	)
	return err
}

const updateTema = `-- name: UpdateTema :exec
UPDATE Tema
SET nombre_tema = $2
WHERE id_tema = $1
`

type UpdateTemaParams struct {
	IDTema     int32  `json:"id_tema"`
	NombreTema string `json:"nombre_tema"`
}

func (q *Queries) UpdateTema(ctx context.Context, arg UpdateTemaParams) error {
	_, err := q.db.ExecContext(ctx, updateTema, arg.IDTema, arg.NombreTema)
	return err
}

const updateUsuario = `-- name: UpdateUsuario :exec
UPDATE Usuario
SET nombre_usuario = $2, email = $3, contrasena = $4
WHERE id_usuario = $1
`

type UpdateUsuarioParams struct {
	IDUsuario     int32  `json:"id_usuario"`
	NombreUsuario string `json:"nombre_usuario"`
	Email         string `json:"email"`
	Contrasena    string `json:"contrasena"`
}

func (q *Queries) UpdateUsuario(ctx context.Context, arg UpdateUsuarioParams) error {
	_, err := q.db.ExecContext(ctx, updateUsuario,
		arg.IDUsuario,
		arg.NombreUsuario,
		arg.Email,
		arg.Contrasena,
	)
	return err
}
